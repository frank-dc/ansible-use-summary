package org.frank.reference.array.one_dimensional;
/*
    数组：存储同一种数据类型的多个元素的集合（也可以称为容器）。

    数组的定义格式：
        格式1：数据类型[] 数组名;
            int[] arr;
        格式2: 数据类型 数组名[];
            int arr[];
        推荐格式1

    有两种方法对数组进行初始化：
        1. 动态初始化：初始化时只指定数组的长度，由系统为数组分配初始值
        2. 静态初始化：初始化时指定每个数组元素的初始值，由系统决定数组的长度
    所以，不能同时指定数组的长度和数组元素的初始值
    int[] arr = new int[3]{11, 22, 33} // 这是非法的

    动态初始化：
        数据类型[] 数组名 = new 数组类型[数组长度];
        int[] arr = new int[3];

    静态初始化：
        数据类型[] 数组名 = new 数组类型[]{元素1, 元素2, ..., 元素n};
        可以简化成：
        数据类型[] 数组名 = {元素1, 元素2, ..., 元素n};
        int[] arr = new int[]{11, 22, 33};
        int[] arr = {11, 22, 33};

 */
public class ArrayDemo {
    public static void main(String[] args) {
        int[] arr = new int[3];
        /*
        左边：
            int: 说明数组元素的数据类型
            []: 说明这是一个数组
            arr: 数组的名称

        右边：
            new: 位实例（对象）开辟内存空间（堆）
            int: 说明数组元素的数据类型
            []: 说明这是一个数组
            3: 定义数组的长度
         */

        // 直接打印数组名称，会在控制台输出该数组的内存地址值
        System.out.println(arr);    // [I@56cbfb61

        // 如何获取数组里面的元素？
        /*
            数组为每一个元素分配了编号，这个编号专业的叫法：索引
            数组是从 0 开始编号的，也就说明数组的最大编号是(数组长度 - 1)
            有了编号，我们就可以通过数组名和编号配合取得数组元素
            用法：数组名[编号]
         */
        System.out.println(arr[0]); // 0
        System.out.println(arr[1]); // 0
        System.out.println(arr[2]); // 0
    }
}
