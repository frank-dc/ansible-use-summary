面向过程：自己一步步的完成操作，强调的是过程。
面向对象：调用别人的操作，强调的是结果。

面向对象的思想特点：
    1. 是一种更符合我们思想习惯的思想
    2. 可以将复杂的事情简单化
    3. 将我们从执行者变成了指挥者


写代码举例：
    需求：把大象装进冰箱
    步骤：
        1. 打开冰箱门
        2. 塞进大象
        3. 关上冰箱门

面向过程编程
    1. 打开冰箱门
    2. 塞进大象
    3. 关上冰箱门
```java
public class Demo {
    public static void main(String[] args){
        //System.out.println("打开冰箱门");
        //System.out.println("塞进大象");
        //System.out.println("关闭冰箱门");

        //可能打开冰箱门的操作需要做多次
        //并且，打开冰箱门这个功能的代码比较多
        //这个时候，其实我们应该用方法改进
        //调用功能
        open();
        in();
        close();
    }
    public static void open(){
        System.out.println("打开冰箱门");
    }

    public static void in(){
        System.out.println("塞进大象");
    }

    public static void close(){
        System.out.println("关闭冰箱门");
    }
}
```

面向对象编程：
    要做到面向对象，分析三步走
        1. 分析有哪些类存在
            UML(统一建模语言) 名词提取法
        2. 分析每个类有哪些功能
        3. 分析类与类的关系

    回到把大象装进冰箱：
        1. 分析有哪些类存在
            大象
            冰箱
            测试类（带main方法的那个类）
        2. 分析每个类有哪些功能
            大象：进去
            冰箱：打开门、关闭门
            测试类：main
        3. 分析类与类的功能
            在测试类中调用冰箱类和大象类的功能

```java
public class 大象 {
    public static void in() {
        System.out.println("塞进大象");
    }
}

public class 冰箱 {
    public static void open() {
        System.out.println("打开冰箱门");
    }

    public static void close() {
        System.out.println("关闭冰箱门");
    }
}

public class 测试类 {
    public static void main(String[] args){
        冰箱的open();
        大象的in();
        冰箱的close();
    }
}
```

面向对象的思考：
    以后在完成一个需求的时候，请先找是否有对象完成了这个功能，有就直接使用即可。
    如果没有，就定义一个类，完成功能，将来可以给别人使用。